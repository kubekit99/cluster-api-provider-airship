// Code generated by schema-generate. DO NOT EDIT.

package drydock

// AssetsItems
type AssetsItems struct {
	Data             interface{} `json:"data,omitempty"`
	DataPipeline     []string    `json:"data_pipeline,omitempty"`
	Location         string      `json:"location,omitempty"`
	LocationPipeline []string    `json:"location_pipeline,omitempty"`
	Path             string      `json:"path,omitempty"`
	Permissions      string      `json:"permissions,omitempty"`
	Type             string      `json:"type"`
}

// FilterSetItems
type FilterSetItems struct {
	FilterType string      `json:"filter_type,omitempty"`
	NodeLabels *NodeLabels `json:"node_labels,omitempty"`
	NodeNames  []string    `json:"node_names,omitempty"`
	NodeTags   []string    `json:"node_tags,omitempty"`
	RackLabels *RackLabels `json:"rack_labels,omitempty"`
	RackNames  []string    `json:"rack_names,omitempty"`
}

// NodeFilter
type NodeFilter struct {
	FilterSet     []*FilterSetItems `json:"filter_set,omitempty"`
	FilterSetType string            `json:"filter_set_type,omitempty"`
}

// NodeLabels
type NodeLabels struct {
	AdditionalProperties map[string]interface{} `json:"-,omitempty"`
}

// RackLabels
type RackLabels struct {
	AdditionalProperties map[string]interface{} `json:"-,omitempty"`
}

// Root
type BootactionSpec struct {
	Assets     []*AssetsItems `json:"assets,omitempty"`
	NodeFilter *NodeFilter    `json:"node_filter,omitempty"`
	Signaling  bool           `json:"signaling,omitempty"`
}
